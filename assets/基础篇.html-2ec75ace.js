import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as c,c as p,a as t,b as a,d as s,f as e}from"./app-3b91dcb7.js";const i="/assets/jvm-c92d0dd4.png",l="/assets/JDK、JRE-dabd77bc.png",r="/assets/java语言编译解释-9187d754.png",u="/assets/java语言编译解释2-024461b0.png",h="/assets/四者的关系-82b6e16b.png",k="/assets/编译型语言和解释型语言-0f23b6c3.png",g="/assets/移位运算符-eef5ab5c.png",v={},m=e('<h1 id="java基础知识点" tabindex="-1"><a class="header-anchor" href="#java基础知识点" aria-hidden="true">#</a> Java基础知识点</h1><hr><h2 id="java语言的特点" tabindex="-1"><a class="header-anchor" href="#java语言的特点" aria-hidden="true">#</a> Java语言的特点</h2><ol><li>面向对象（封装，继承，多态）</li><li>平台无关性（ Java 虚拟机实现平台无关性）</li><li>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）</li><li>可靠性（具备异常处理和自动内存管理机制）</li><li>高效性（通过 Just In Time 编译器等技术的优化，Java 语言的运行效率还是非常不错的）</li><li>支持网络编程并且很方便</li></ol><h2 id="jvm、jdk、jre" tabindex="-1"><a class="header-anchor" href="#jvm、jdk、jre" aria-hidden="true">#</a> JVM、JDK、JRE</h2><h3 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h3><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。<strong>JVM 有针对不同系统的特定实现</strong>（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption>运行在 Java 虚拟机之上的编程语言</figcaption></figure><p>**JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。**也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。</p><h3 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk" aria-hidden="true">#</a> JDK</h3><p>JDK（Java Development Kit）：Java开发工具包，它是功能齐全的 Java SDK，是提供给开发者使用的，能够<strong>创建和编译 Java 程序</strong>。他包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。</p><h3 id="jre" tabindex="-1"><a class="header-anchor" href="#jre" aria-hidden="true">#</a> JRE</h3><p>JRE（Java Runtime Environment） 是 Java 运行时环境。它是<strong>运行已编译 Java 程序</strong>所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption>JDK 包含 JRE</figcaption></figure><h2 id="字节码" tabindex="-1"><a class="header-anchor" href="#字节码" aria-hidden="true">#</a> 字节码</h2><p>字节码：JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。</p><blockquote><p>Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。</p><p>由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。（一次编译，处处运行）</p></blockquote><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption>Java程序转变为机器代码的过程</figcaption></figure><p>我们需要格外注意的是 <code>.class-&gt;机器码</code> 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 <strong>JIT（Just in Time Compilation）</strong> 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用（<strong>预编译</strong>）。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption>Java程序转变为机器代码的过程</figcaption></figure><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据<strong>二八定律</strong>，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。</p></blockquote><p>JDK、JRE、JVM、JIT 这四者的关系如下图所示。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption>JDK、JRE、JVM、JIT 这四者的关系</figcaption></figure><h2 id="java-语言-编译与解释并存" tabindex="-1"><a class="header-anchor" href="#java-语言-编译与解释并存" aria-hidden="true">#</a> Java 语言“编译与解释并存”</h2>',24),b=t("strong",null,"编译型",-1),f={href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},J={href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},_=t("strong",null,"解释型",-1),x={href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},j=e('<figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption>编译型语言和解释型语言</figcaption></figure><p>由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>.class</code> 文件），这种字节码必须由 Java 解释器来解释执行。</p><h2 id="aot-ahead-of-time-compilation-提前编译" tabindex="-1"><a class="header-anchor" href="#aot-ahead-of-time-compilation-提前编译" aria-hidden="true">#</a> AOT(Ahead of Time Compilation) 提前编译</h2><p>AOT：这种编译模式会在程序被执行前就将其编译成机器码，属于静态编译（C、 C++，Rust，Go 等语言就是静态编译）。AOT 避免了 JIT 预热等各方面的开销，可以提高 Java 程序的启动速度，避免预热时间长。</p><blockquote><p>JIT：一个 Java 程序从启动到达到被JIT动态编译优化会经过 VM init，App init 和 App active 几个阶段，相比于其他一些编译型语言，其冷启动问题比较严重。</p><p>先解释执行再动态编译的 Java 传统程序运行方式存在上述诸多问题，那有没有一些方式可以让 Java 程序也跟其他程序语言，比如 C/C++ 一样，先编译后执行解决上述问题呢？</p><p>AOT：将 Java 程序的编译阶段提前到程序启动前，然后在编译阶段进行代码编译优化，让程序启动既巅峰，消除冷启动，降低运行时内存开销。</p></blockquote>',5),E={href:"https://mp.weixin.qq.com/s/4haTyXUmh8m-dBQaEzwDJw",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="java与c-的区别" tabindex="-1"><a class="header-anchor" href="#java与c-的区别" aria-hidden="true">#</a> Java与C++的区别</h2><ul><li><p>Java 不提供指针来直接访问内存，程序内存更加安全</p></li><li><p>Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</p></li><li><p>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。</p></li><li><p>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。</p></li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><hr><h3 id="标识符与关键字" tabindex="-1"><a class="header-anchor" href="#标识符与关键字" aria-hidden="true">#</a> 标识符与关键字</h3><p>标识符：程序、类、变量、方法的名字。</p><p>关键字：被Java语言赋予特殊含义的标识符。</p><h4 id="java语言关键字" tabindex="-1"><a class="header-anchor" href="#java语言关键字" aria-hidden="true">#</a> Java语言关键字</h4><table><thead><tr><th>分类</th><th>关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>protected</td><td>public</td><td></td><td></td><td></td><td></td></tr><tr><td>类，方法和变量修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr><td></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td>enum</td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr><td></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>default</td><td>assert</td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr><td></td><td>short</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。</p><p><code>default</code> 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。</p><ul><li>在程序控制中，当在 <code>switch</code> 中匹配不到任何情况时，可以使用 <code>default</code> 来编写默认匹配的情况。</li><li>在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 <code>default</code> 关键字来定义一个方法的默认实现。</li><li>在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 <code>default</code>，但是这个修饰符加上了就会报错。</li></ul></blockquote><p>⚠️ 注意：虽然 <code>true</code>, <code>false</code>, 和 <code>null</code> 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。</p><h3 id="自增自减运算符" tabindex="-1"><a class="header-anchor" href="#自增自减运算符" aria-hidden="true">#</a> 自增自减运算符</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。</p><p>++ 和 -- 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 先自增（自己增加 1），再赋值（赋值给 b）</span>
b <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>
<span class="token comment">// 先赋值(赋值给 d)，再自增（自己增加 1）</span>
d <span class="token operator">=</span> c<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移位运算符" tabindex="-1"><a class="header-anchor" href="#移位运算符" aria-hidden="true">#</a> 移位运算符</h3><p>移位操作中，被操作的数据被视为二进制数，移位就是将其向左或向右移动若干位的运算。</p><p><code>HashMap</code>（JDK1.8） 中的 <code>hash</code> 方法的源码就用到了移位运算符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token comment">// key.hashCode()：返回散列值也就是hashcode</span>
    <span class="token comment">// ^：按位异或</span>
    <span class="token comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 代码里使用 <code>&lt;&lt;</code>、 <code>&gt;&gt;</code> 和<code>&gt;&gt;&gt;</code>转换成的指令码运行起来会更高效些。</p><p>Java 中有三种移位运算符：</p><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption>Java 移位运算符总结</figcaption></figure><ul><li><p><code>&lt;&lt;</code> :左移运算符，向左移若干位，高位丢弃，低位补零。<code>x &lt;&lt; 1</code>,相当于 x 乘以 2(不溢出的情况下)。</p></li><li><p><code>&gt;&gt;</code> :带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。<code>x &gt;&gt; 1</code>,相当于 x 除以 2。</p></li><li><p><code>&gt;&gt;&gt;</code> :无符号右移，忽略符号位，空位都以 0 补齐。</p></li></ul><p>由于 <code>double</code>，<code>float</code> 在二进制中的表现比较特殊，因此不能来进行移位操作。</p><p>移位操作符实际上支持的类型只有<code>int</code>和<code>long</code>，编译器在对<code>short</code>、<code>byte</code>、<code>char</code>类型进行移位前，都会将其转换为<code>int</code>类型再操作。</p><h4 id="如果移位的位数超过数值所占有的位数会怎样" tabindex="-1"><a class="header-anchor" href="#如果移位的位数超过数值所占有的位数会怎样" aria-hidden="true">#</a> 如果移位的位数超过数值所占有的位数会怎样？</h4><p>当 <strong>int 类型</strong>左移/右移位数<strong>大于等于 32 位</strong>操作时，会<strong>先求余（%）后再进行左移/右移操作</strong>。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。</p><p>当 <strong>long 类型</strong>进行左移/右移操作时，由于 long 对应的二进制是 <strong>64 位</strong>，因此求余操作的基数也变成了 64。</p><p>也就是说：<code>x&lt;&lt;42</code>等同于<code>x&lt;&lt;10</code>，<code>x&gt;&gt;42</code>等同于<code>x&gt;&gt;10</code>，<code>x &gt;&gt;&gt;42</code>等同于<code>x &gt;&gt;&gt; 10</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始数据：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>										<span class="token comment">// -1</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始数据对应的二进制字符串：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 11111111111111111111111111111111</span>
i <span class="token operator">&lt;&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;左移 10 位后的数据 &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// -1024</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;左移 10 位后的二进制字符 &quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 11111111111111111111110000000000</span>
i <span class="token operator">&lt;&lt;=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;左移 42 位后的数据 &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>								<span class="token comment">// -1024</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;左移 42 位后的二进制字符 &quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 11111111111111111111110000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="continue、break-和-return" tabindex="-1"><a class="header-anchor" href="#continue、break-和-return" aria-hidden="true">#</a> continue、break 和 return</h3><p>在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：</p><ol><li><code>continue</code>：指跳出当前的这一次循环，继续下一次循环。</li><li><code>break</code>：指跳出整个循环体，继续执行循环下面的语句。</li></ol><p><code>return</code> 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：</p><ol><li><code>return;</code>：直接使用 return 结束方法执行，用于没有返回值函数的方法</li><li><code>return value;</code>：return 一个特定值，用于有返回值函数的方法</li></ol><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><hr><h3 id="java-中的八种基本数据类型" tabindex="-1"><a class="header-anchor" href="#java-中的八种基本数据类型" aria-hidden="true">#</a> Java 中的八种基本数据类型</h3><ul><li>6 种数字类型： <ul><li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>2 种浮点型：<code>float</code>、<code>double</code></li></ul></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code>。</li></ul><p>8 种基本数据类型的默认值以及所占空间的大小如下：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th><th>取值范围</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td><td>-128 ~ 127</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td><td>-32768（-2^15） ~ 32767（2^15 - 1）</td></tr><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td><td>-2147483648 ~ 2147483647</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td><td>-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>&#39;u0000&#39;</td><td>0 ~ 65535（2^16 - 1）</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td><td>1.4E-45 ~ 3.4028235E38</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td><td>4.9E-324 ~ 1.7976931348623157E308</td></tr><tr><td><code>boolean</code></td><td>1</td><td></td><td>false</td><td>true、false</td></tr></tbody></table><p>byte<code>、</code>short<code>、</code>int<code>、</code>long类型，二进制补码表示法中，最高位是用来表示符号的（0 表示正数，1 表示负数），其余位表示数值部分。如果我们要表示最大的正数，我们需要把除了最高位之外的所有位都设为 1。如果我们再加 1，就会导致溢出，变成一个负数。</p><blockquote><p><strong>注意：</strong></p><ol><li>Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上 <strong>L</strong>，否则将作为整型解析。</li><li><code>char a = &#39;h&#39;</code>char :单引号，<code>String a = &quot;hello&quot;</code> :双引号。</li></ol></blockquote><p>这八种基本类型都有对应的包装类分别为：<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。</p><h3 id="基本类型和包装类型" tabindex="-1"><a class="header-anchor" href="#基本类型和包装类型" aria-hidden="true">#</a> 基本类型和包装类型</h3><ul><li><p><strong>用途</strong>：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。</p></li><li><p><strong>存储方式</strong>：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 <code>static</code> 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。</p></li><li><p><strong>占用空间</strong>：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。</p></li><li><p><strong>默认值</strong>：成员变量包装类型不赋值就是 <code>null</code> ，而基本类型有默认值且不是 <code>null</code>。</p></li><li><p><strong>比较方式</strong>：对于基本数据类型来说，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</p></li></ul><blockquote><p>（被 <code>static</code> 修饰 ）基本数据类型的成员变量，存放在方法区内</p></blockquote><h3 id="包装类型的缓存机制" tabindex="-1"><a class="header-anchor" href="#包装类型的缓存机制" aria-hidden="true">#</a> 包装类型的缓存机制</h3>`,48);function w(A,V){const n=d("ExternalLinkIcon");return c(),p("div",null,[m,t("ul",null,[t("li",null,[t("p",null,[b,a("："),t("a",f,[a("编译型语言"),s(n)]),a(" 会通过"),t("a",J,[a("编译器"),s(n)]),a("将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。")])]),t("li",null,[t("p",null,[_,a("："),t("a",x,[a("解释型语言"),s(n)]),a("会通过"),t("a",y,[a("解释器"),s(n)]),a("一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。")])])]),j,t("p",null,[t("a",E,[a("基于静态编译构建微服务应用"),s(n)])]),q])}const C=o(v,[["render",w],["__file","基础篇.html.vue"]]);export{C as default};
